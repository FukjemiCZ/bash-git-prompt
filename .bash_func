# Global configuration
export KUBE_PROMPT=true
export GIT_PROMPT=true
export GITUSER_PROMPT=true

## Customization
# COLORS for bash prompt
NOC="\[[0m\]"
WHITE="\[[1m\]"
GREY="\[[2m\]"
UNDERLINE="\[[4m\]"
DEFACE="\[[9m\]"
DARK="\[[30m\]"
RED="\[[31m\]"
GREEN="\[[32m\]"
YELOW="\[[33m\]"
BLUE="\[[34m\]"
PINK="\[[35m\]"
AZURE="\[[36m\]"
BDARK="\[[40m\]"
BRED="\[[41m\]"
BGREEN="\[[42m\]"
BYELOW="\[[43m\]"
BBLUE="\[[44m\]"
BPINK="\[[45m\]"
BAZURE="\[[46m\]"
BWHITE="\[[7m\]"
HDARK="\[[90m\]"
HRED="\[[91m\]"
HGREEN="\[[92m\]"
HYELOW="\[[93m\]"
HBLUE="\[[94m\]"
HPINK="\[[95m\]"
HAZURE="\[[96m\]"

# Colors
_NOC="[0m"
_WHITE="[1m"
_GREY="[2m"
_UNDERLINE="[4m"
_DEFACE="[9m"
_DARK="[30m"
_RED="[31m"
_GREEN="[32m"
_YELOW="[33m"
_BLUE="[34m"
_PINK="[35m"
_AZURE="[36m"
_BDARK="[40m"
_BRED="[41m"
_BGREEN="[42m"
_BYELOW="[43m"
_BBLUE="[44m"
_BPINK="[45m"
_BAZURE="[46m"
_BWHITE="[7m"
_HDARK="[90m"
_HRED="[91m"
_HGREEN="[92m"
_HYELOW="[93m"
_HBLUE="[94m"
_HPINK="[95m"
_HAZURE="[96m"

# Bash prompt base color
PROMPTBASECOL=${AZURE}

# Checkstate function
# Usefull for oneliners
# Example
# ....command
# check_state "This is state of previous command"
#
function check_state {
    state=$?
    if [ $state = 0 ] ; then
        echo -n "${NOC}[ ${GREEN}OK ${NOC}]"
    else
        echo -n "${NOC}[ ${RED}FAILED ${NOC}]"
    fi

    echo " $*"
    return $state

}
# Random string generator
function randpass {

    if [ -z $1 ] ; then 
    MAXSIZE=10
    else
    MAXSIZE=$1
    fi

    array1=( 
    q w e r t y u i o p a s d f g h j k l z x c v b n m Q W E R T Y U I O P A S D 
    F G H J K L Z X C V B N M 1 2 3 4 5 6 7 8 9 0   
    )
    MODNUM=${#array1[*]}
    pwd_len=0
    RANDPASS=""

    while [ $pwd_len -lt $MAXSIZE ] 
    do
    index=$(($RANDOM%$MODNUM))
    RANDPASS=$RANDPASS${array1[$index]} 
    ((pwd_len++))
    done

    echo $RANDPASS
    
}

function fix_ssh_key {
    host=$1
    for i in $host $(dig +short $host) ; do
        ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$i"
    done
}

function kubeprompt {
    case $1 in 
    "on")
        export KUBE_PROMPT=true
    ;;
    "off")
        unset KUBE_PROMPT
    ;;
    esac
}
function gituserprompt {
    case $1 in 
    "on")
        export GITUSER_PROMPT=true
    ;;
    "off")
        unset GITUSER_PROMPT
    ;;
    esac
}
function gitprompt {
    case $1 in 
    "on")
        export GIT_PROMPT=true
    ;;
    "off")
        export GIT_PROMPT=false
        unset gitpart
    ;;
    esac
}

function create_prompt_kube {
    if [[ "$KUBE_PROMPT" == "true" ]] ; then
        if which kubectl &> /dev/null ; then
            cur_context=$(kubectl config current-context)
            cur_namespace=$(kubectl config get-contexts | grep '^*' | grep -E -o '[A-Za-z0-9_-]+$')
            echo -e "\n${PROMPTBASECOL}> KUB: ${WHITE}$cur_context${NOC}${PROMPTBASECOL} N: ${WHITE}$cur_namespace${NOC}"
        fi
    fi
}
function create_prompt_gituser {
    if [[ "$GITUSER_PROMPT" == "true" ]] ; then
        cur_gitname=$(git config user.name)
        cur_gitemail=$(git config user.email)
        echo -e "\n${PROMPTBASECOL}> GIT.NAME: ${WHITE}$cur_gitname${NOC}${PROMPTBASECOL} GIT.EMAIL: ${WHITE}$cur_gitemail${NOC}"
    fi
}

#function url
function gitpipe {
        gitrepopath=$(git config --get remote.origin.url | cut -d "@" -f 2| cut -d ":" -f 2 | cut -d "." -f 1)
        gitreposrv=$(git config --get remote.origin.url | cut -d "@" -f 2 | cut -d ":" -f 1)
        if [ $gitreposrv = gitlab.com ] ; then
           google-chrome $gitreposrv/$gitrepopath/-/pipelines
        fi
}

function create_prompt {

    history -a
    last_command=$?
    time_now=$(date +"%H:%M:%S")

    if [[ "$GIT_PROMPT" != "false" ]] ; then
        if which git &> /dev/null ; then
            gitpart=""
            if ! [[ $PWD == *buildsystem-tags* ]] ; then
                if git ls-files ./ --error-unmatch >/dev/null 2>/dev/null ; then
                stash=$(git stash list | wc -l)
                mod=$(git status -s --porcelain | egrep -v "^\?\?"| grep -E "^.{0,1}[RM]"|wc -l)
                add=$(git status -s --porcelain | egrep -v "^\?\?"| grep -E "^.{0,1}A"|wc -l)
                del=$(git status -s --porcelain | egrep -v "^\?\?"| grep -E "^.{0,1}D"|wc -l)

                # git submodules
                if [ -e ./.gitmodules ] ; then 
                    submod=$(git submodule | wc -l)
                    submodule_info=" | ${HAZURE}SM: ${HYELOW}$submod$NOC"
                else
                    submodule_info=""
                fi
                
                #git status local vs remote
                status=$(git status | grep -e "^.*Your branch is")

                if echo $status | grep 'ahead' > /dev/null ; then
                    num=$(echo $status | grep -o "[0-9]*")
                    rstat=" ${AZURE}U:${HYELOW}->${HRED}$num$NOC"
                elif echo $status | grep 'behind' > /dev/null ; then
                    num=$(echo $status | grep -o "[0-9]*")
                    rstat=" ${AZURE}U:${HYELOW}<-${HRED}$num$NOC"
                else
                        rstat=""
                fi



                if [ $mod -gt 0 ] ; then 
                    mod="$HRED$mod$NOC$PROMPTBASECOL"
                else
                    mod="$NOC$WHITE$mod$NOC$PROMPTBASECOL"
                fi
                if [ $add -gt 0 ] ; then 
                    add="$HRED$add$NOC$PROMPTBASECOL"
                else
                    add="$NOC$WHITE$add$NOC$PROMPTBASECOL"
                fi
                if [ $del -gt 0 ] ; then 
                    del="$HRED$del$NOC$PROMPTBASECOL"
                else
                    del="$NOC$WHITE$del$NOC$PROMPTBASECOL"
                fi
                if [ $stash -gt 0 ] ; then 
                    stash=" ${AZURE}S: $RED$stash$PROMPTBASECOL"
                else
                    stash=""
                fi

                repo=$(git branch | grep -e "^\*"| awk '{print $2}')
                gitpart="\n${PROMPTBASECOL}> GIT: $repo | M: $mod A: $add D: $del$stash$rstat$submodule_info"
                fi

                if [[ "$USER" == "root" ]] ; then 
                    COLORPS=$NOC$HRED
                else
                    COLORPS=$NOC$WHITE
                fi
            else
                gitpart=""
            fi
        fi
    fi

    if [ $last_command -ne 0 ] ; then
        lastcmdpart="${HRED}(!)${NOC} "
    else
        lastcmdpart=""
    fi

    PS1="$(create_prompt_kube)$(create_prompt_gituser)$gitpart\n$PROMPTBASECOL($COLORPS\u@\h$NOC$PROMPTBASECOL)-(${COLORPS}$time_now$NOC$PROMPTBASECOL)-($COLORPS\w$NOC$PROMPTBASECOL)\n${lastcmdpart}$PROMPTBASECOL($COLORPS!\!$NOC$PROMPTBASECOL)-> $NOC"

}

if [ -x `which kubectl` ] ; then
    source <(kubectl completion bash)
fi

